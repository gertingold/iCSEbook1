
Warsztaty WOM 2017
------------------
 
Wstęp
=====

print

.. sagecellserver::

    print "(4/3+5/5)-(5/2-4/6) =", (4/3+5/5)-(5/2-4/6)
    print "(3^15-3^13)/(3^13+3^14) =", (3^15-3^13)/(3^13+3^14)
    print "1001 =", factor(1001)
    print "(sqrt(8)-sqrt(2))^2 =", (sqrt(8)-sqrt(2))^2
    print "5! =", factorial(5)
    print "NWD(354,222) =", gcd(354, 222)
    
show    
    
.. sagecellserver::

    show(sqrt(2), "=", N(sqrt(2), digits=70))
    show(pi, "=", N(pi, digits=80))
    show(2^288+5^80)
    
zmienne    
    
.. sagecellserver::

    var('a','b')
    wzor1=(a+b)^2
    wzor2=(a-b)^2
    wzor3=(a+b)*(a-b)
    show (wzor1, "=", wzor1.canonicalize_radical())
    show (wzor2, "=", wzor2.canonicalize_radical())
    show (wzor3, "=", wzor3.canonicalize_radical())
    a=sqrt(3)
    b=2
    wzor1=(a+b)^2
    wzor2=(a-b)^2
    wzor3=(a+b)*(a-b)
    show (wzor1, "=", wzor1.canonicalize_radical())
    show (wzor2, "=", wzor2.canonicalize_radical())
    show (wzor3, "=", wzor3.canonicalize_radical())
 
wykresy

.. sagecellserver::

    lk=[]
    for i in range(50):
        lk = lk+[circle((random(),random()), random()/20, fill=True, edgecolor=(random(), random(), random()), facecolor=(random(), random(), random()))] 
    show(sum(lk), axes=False, frame=True, figsize=6 )

Zbiory i prawa logiki
=====================

A | B    #suma zbiorów

A & B    #iloczyn zbiorów

A - B    #różnica zbirów

Zbiory

.. sagecellserver::

    A={1,2,3,4,5}
    B={-1,0,1,2}
    A | B

Tabelka dla alternatywy.

.. sagecellserver::

    for p in [0, 1]:
        for q in [0, 1]:
            print p, " lub ", q, " => ", p or q
 
I Prawo de'Morgana 
 
.. sagecellserver::

    for p in [0, 1]:
        for q in [0, 1]:
            print (not(p and q)) == (not(p) or not(q))
            print "~( %d i %d ) <=> ~%d lub ~%d" % (p, q, p, q)
            print "     %d     <=>    %d  " % (not(p and q), not(p) or not(q))

Kopiując i zmieniając odpowiednie spójniki logiczne przedstaw tabelkę dla II Prawa De Morgana

.. sagecellserver::

    for p in [0, 1]:
        for q in [0, 1]:   
        
Funkcje trygonometryczne
========================

plot, show

.. sagecellserver::

    f(x)=sin(x)
    g(x)=cos(x)
    f1=plot(f,xmin=-pi, xmax=2*pi, linestyle="--", figsize=4, tick_formatter=pi, ticks=pi/4, color="green")
    f2=plot(g,xmin=0, xmax=2*pi, linestyle=":", figsize=4, tick_formatter=pi, ticks=pi/4, color="red")
    show(f1 + f2)

.. sagecellserver::
 
    f(x)=tan(x)
    plot(f,xmin=0, xmax=2*pi, ymin=-5, ymax=5, detect_poles="show", linestyle="-", figsize=4, axes_labels=['x','y'], tick_formatter=pi, ticks=pi/4)
    
    
Funkcja kwadratowa
==================

if

.. sagecellserver::

    a = -1
    b = 2
    c = 24
    x1=0
    x2=0
    d = b*b- 4*a*c  # delta
    f(x) = a*x*x + b*x + c
    if d < 0:
        print "Brak rozwiązania dla liczb rzeczywistych!"
    if d==0:
        x1=float(-b/(2*a))
        print "x1=", x1           
    if d > 0:
        x1=float((-b-sqrt(d))/(2*a))
        x2=float((-b+sqrt(d))/(2*a))
        print "x1=", x1, ", ", "x2=", x2
        

Zadanie. Naszkicuj wykres funkcji kwadratowej i zaznacz MZ oraz PPzOY

p1=point((x1,0), color="red", size=15)

plot(...,xmin=..., xmax=..., figsize=4...)

.. sagecellserver::

    a = -1
    b = 2
    c = 24
    x1=0
    x2=0

Silnia i symbol Newtona
=======================

.. sagecellserver::

    %time 
    silnia=factorial(50)
    print silnia 
    print factor(silnia)

binomial, for

Zadanie. Zbuduj trójkąt Pascala.

.. sagecellserver::

    binomial(5, 3)

Równania, układy równań i nierówności
=====================================

solve

.. sagecellserver::

    f = -x^2+4*x-3
    show(f==0)
    show(solve(f==0, x))
    
.. sagecellserver::   
    
    var('a','b','c')
    r_kwadr = a*x^2 + b*x + c == 0
    show(solve(r_kwadr, x))
    
.. sagecellserver:: 

    show(solve(r_kwadr.subs(a=1, b=-3, c=-4), x))
    
.. sagecellserver::

    rownanie = x^6 == 1
    show(solve(rownanie, x))


Poniższy Program pokazuje nam m.in. rozwiązania równania i korzysta z nich w zaznaczeniu miejsc zerowych na wykresie.
Możemy w miejsce wielomianu wpisać szeroką gamę funkcji (wielomiany, funkcje wymierne, funkcje pierwiastkowe).

.. sagecellserver::    
    
    # w = -x^5 + x^4 + 9*x^3 - 9*x^2 - 10*x + 10
    # w = -x^4+x^3+8*x^2-8*x
    w=(3*x-4)/(x-1)
    show("nasza funkcja")
    show(w)            # pokaż funkcję
    show("postać iloczynowa")
    show(factor(w))    # pokaż funkcję w formie iloczynowej
    show("miejsca zerowe")
    rozw=solve(w, x)   # rozwiązania - miejsca zerowe
    show(rozw)         # pokaż rozwiązania - miejsca zerowe
    show("ilość miejsc zerowych")
    n=len(rozw)        # ilość miejsc zerowych
    show(n)            # pokaż ilość miejsc zerowych
    pkt = []           # punkty - miejsca zerowe
    for i in range(0, n):
        x0=x.subs(rozw[i])
        pkt = pkt + [(x0, 0)]
    #show(pkt)
    show("Wykres funkcji wraz z zaznaczonymi miejscami zerowymi")
    plot(w, (x, -5, 5),ymin=-40, ymax=40, figsize=5, detect_poles="show") + points(pkt,size=20,color='red')
    
    
Układy równań

.. sagecellserver::  

    var('x','y')
    show(solve([y==-x^2+4*x, y==0.5*x], x, y))
    
Układy nierówności

.. sagecellserver:: 

    var('x','y')
    g1 = -x^2+4*x
    g2 = 0.5*x
    f1 = plot(g1, (x,-1,5), linestyle="--")
    f2 = plot(g2,(x,-1,5), linestyle="-", color="green")
    rp = region_plot([y<g1,y>=g2],(x,-1,5),(y,-2,5), incol="khaki")
    show(f1 + f2 + rp)

Macierze
========

.. sagecellserver:: 

    M=matrix(3,3,[1..4,2..5,9])
    M

.. sagecellserver::

    html.table( [ ('M',M), ('M transponowana', M.transpose() ), ('M odwrotna', M.inverse() ), ('M wyznacznik', M.det() )] )
    
.. sagecellserver::

    v = vector([3,2,1]) 
    u = M*v 
    html.table( [ ('M*v =', M,'*',v.column(),' = ',u.column() ) ])

.. sagecellserver::
    
    html.table( [ ('M*M.inverse() = ',M,'*',M.inverse(),' = ',M*M.inverse() ) ])
    
.. sagecellserver::

    var('x','y','z')
    v2 = vector([10,19,28])
    v = vector([x,y,z])
    wynik = M\v2
    html.table( [(M,'*', v.column(),'=',v2.column()) ,(v.column(),'=', wynik.column() )])
    
Granice, pochodne, całki
========================

Granica funkcji

.. sagecellserver::

    f(x)=sin(x)/x
    show( "lim (x->0) f(x) = ",limit(f(x), x=0))
    show( "lim (x->infinity) f(x) = ",limit(f(x), x=infinity))
    plot(f,xmin=-12, xmax=12, color="blue", figsize=4)

Pochodna

.. sagecellserver::  
  
    f(x)=x^3-4*x
    x_min=-3
    x_max=3
    g=f.diff(x)
    q=plot(f(x),xmin=x_min, xmax=x_max, color="blue", figsize=4, legend_label=r'$f(x) = x^3-4x $')
    q=q+plot(g,xmin=x_min, xmax=x_max, color="green", figsize=4, legend_label=r"$f '(x)  $")
    show("f'(x)=0 =>",solve(g==0,x))
    show(q)

Całka

.. sagecellserver::    
    
    f=x^2+2*x-1
    show(integrate(f, x))

Całka oznaczona

.. sagecellserver:: 

    a=0.0
    b=4.0 
    f(x)=-x^2+4*x 
    integrate(f(x),(x,a,b)).n() 
