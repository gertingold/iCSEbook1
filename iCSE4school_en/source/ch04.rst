
Funkcja abs() wersja 28 października
-----------------------

.. admonition:: Mariola Strojny, Michał Strojny 2016

  Jednym z ważniejszych terminów dotyczących liczb rzeczywistych jest wartość bezwzględna liczby rzeczywistej.

Definicja mówi, że wartością bezwzględną liczby rzeczywistej a (oznaczamy |a|) nazywamy:

Liczbę :math:`a`, jeżeli :math:`a` jest liczbą nieujemną;
Liczbę przeciwną do :math:`a`, jeśli :math:`a` jest liczbą ujemną
Zapis symboliczny:

.. math::

  |a|=\left\{
  \begin{array}{ll}
  a, & \textrm{ gdy } a\geq 0 \\
  -a, & \textrm{ gdy } a<0 \\
  \end{array}
  \right.

 
Prześledźmy kilka przykładów jak powstają wykresy funkcji z użyciem wartości bezwzględnej, potraktowanej jako przekształcenie.

Funkcja liniowa jest dobrym obiektem do przykładowego pokazania jak działają złożenia przekształceń.

 
Niech dana będzie funkcja liniowa :math:`f(x) = 100x`

  
   
.. sagecellserver::

  var('x')
  f(x)=x
  plot(f,x,-10,10,color='blue',thickness=2)
  
Tworzymy wykres funkcji :math:`f(x) = |x|`. Na mocy definicji wartości bezwzględnej odbija się część wykresu dla ujemnych wartości, pozostała część nie zmienia swojego położenia.

.. sagecellserver::

  var ('x')
  f(x)=abs(x)
  plot(f,x,-10,10, color='blue',thickness=2)
  
  
Otrzymamy wykres :math:`f(x)=|x|` przesuwamy o wektor :math:`[0, -200]`. W wyniku translacji otrzymujemy wykres :math:`f(x)=|x|-2`

We've used a square-root algorithm (which is based on Newton's method for finding zeros of a function, this case is known as Babylonian method):  https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method Perhaps you should change p and a range?

.. sagecellserver::

  f(x)=tan(x)
  plot(f,xmin=0, xmax=2*pi, ymin=-5, ymax=5, detect_poles="show", linestyle="-", figsize=4, axes_labels=['x','y'], tick_formatter=pi,   ticks=pi/4) 
       	

And what's interesting?
Let's try to transform a formula that has :math:`\sqrt{2}`, for instance

.. sagecellserver::

  var('a','b','c')
  r_kwadr = a*x^2 + b*x + c == 0
  solve(r_kwadr, x) 
  

Everyone has heard about the transformation of expressions that contain numbers that are not rational, so let's get to the tedious work...

.. math::

  \left(\frac{\sqrt{2}-1}{\sqrt{2}+1}\right)^3=\left(\frac{\sqrt{2}-1}{\sqrt{2}+1}\cdot\frac{\sqrt{2}-1}{\sqrt{2}-1}\right)^3=\left(\sqrt{2}-1\right)^6,


but

.. math::

  \left(\sqrt{2}-1\right)^6=\left(\left(\sqrt{2}-1\right)^2\right)^3=\left(3-2\sqrt{2}\right)^3,
  
and  

.. math::

  \left(\sqrt{2}-1\right)^6=\left(\left(\sqrt{2}-1\right)^3\right)^2=\left(5\sqrt{2}-7\right)^2,

and finally

.. math::

  \left(\sqrt{2}-1\right)^6=\left(5\sqrt{2}-7\right)^2=99-70\sqrt{2}.
  
Let

.. math::

  w_1=99-70\sqrt{2},\quad w_2=\left(5\sqrt{2}-7\right)^2,\quad w_3=\left(3-2\sqrt{2}\right)^3,\quad w_4=\left(\sqrt{2}-1\right)^6,\quad w_5=\left(\frac{\sqrt{2}-1}{\sqrt{2}+1}\right)^3.

Of course :math:`w_1=w_2=w_3=w_4=w_5`, but: are there any difference among :math:`w_1,\dots,w_5` when we approach the square-root of two? Let's see...
We'll assume that the square root of two is equal to :math:`1.44` and you should change this value. 

.. sagecellserver::

  p=1.44     #change p, don't forget about sqrt(2)
  print 'apr=',p
  print 'w_1=',N(99-70*p)
  print 'w_2=',N((5*p-7)^2)
  print 'w_3=',N((3-2*p)^3)
  print'w_4=',N((p-1)^6)
  print 'w_5=',N(((p-1)/(p+1))^3)
  
It turns out that the differences among approximations are big, if we accept the square-root of two as :math:`1.41` (and yet many people think of approximations only to parts hundredths). What about the approximations we got by Babylonian method above? Try them!

The differences are large, what we can see, considering graphs related functions connected with :math:`w_1,\dots,w_5`. 

.. sagecellserver::

  @interact
  def _(xlimits=range_slider(0.5, 2.5, 0.1, default=(0.5, 2.5), label="horizontal range"),
      ylimits=range_slider(-10, 10, 0.1, default=(-10, 10), label="vertical range")):
    plt = plot(99-70*x, xlimits, color="red")
    plt = plt+plot((5*x-7)^2, xlimits, color="blue")
    plt = plt+plot((3-2*x)^3, xlimits, color="green")
    plt = plt+plot((x-1)^6, xlimits, color="orange")
    plt = plt+plot(((x-1)/(x+1))^3, xlimits, color="purple")
    show(plt, xmin=xlimits[0], xmax=xlimits[1], ymin=ylimits[0], ymax=ylimits[1], figsize=(4, 3))
  
**At the end** we go to ``sqrt(2)``.

:math:`\verb+sqrt(2)+=\sqrt{2}\quad\textrm{ or }\quad\verb+sqrt(2)+\approx\sqrt{2}?`

Is not that strange?
